// This package exports symbols and is used by other testdata.

type Matrix interface {
	At(i, j int) float64
	Set(i, j int, v float64)
	Add(m Matrix) Matrix
	Equal(m Matrix) bool
}

methodik memMatrix struct {
	Rows   int
	Cols   int
	Stride int
	Data   []float64
} {
	func (*m) offset(i, j int) int {
		if i < 0 || i >= m.Rows || j < 0 || j >= m.Cols {
			panic("matrix position out of bounds")
		}
		return i*m.Stride + j
	}
	func (*m) At(i, j int) float64     { return m.Data[m.offset(i, j)] }
	func (*m) Set(i, j int, v float64) { m.Data[m.offset(i, j)] = v }
	func (*m) Add(m2 Matrix) Matrix {
		m3 := &memMatrix{Rows: m.Rows, Cols: m.Cols, Stride: m.Cols, Data: make([]float64, m.Rows*m.Cols)}

		// Silly implementation, this is not meant for serious programs.
		for i := 0; i < m.Rows; i++ {
			for j := 0; j < m.Cols; j++ {
				m3.Set(i, j, m.At(i, j)+m2.At(i, j))
			}
		}
		return m3
	}
	func (*m) Equal(m2 Matrix) bool {
		if m.Rows != m2.(*memMatrix).Rows || m.Cols != m2.(*memMatrix).Cols {
			return false
		}
		for i := 0; i < m.Rows; i++ {
			for j := 0; j < m.Cols; j++ {
				if m.At(i, j) != m2.At(i, j) {
					return false
				}
			}
		}
		return true
	}
}

func New(i, j int) Matrix {
	return &memMatrix{Rows: i, Cols: j, Stride: j, Data: make([]float64, i*j)}
}

print("OK")
